// script.js
const chatForm = document.getElementById('chat-form');
const userInput = document.getElementById('user-input');
const sendButton = document.getElementById('send-button');
const chatMessages = document.getElementById('chat-messages');
const loading = document.getElementById('loading');
const statusSpan = document.getElementById('status');
const cacheStatusSpan = document.getElementById('cache-status');

// Auto-resize textarea
userInput.addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = this.scrollHeight + 'px';
});

// Handle form submission
chatForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    const message = userInput.value.trim();
    if (!message) return;

    await sendMessage(message);
});

// Send message function
async function sendMessage(message) {
    // Add user message to chat
    addMessage(message, 'user');

    // Clear input and disable form
    userInput.value = '';
    userInput.style.height = 'auto';
    setFormEnabled(false);
    showLoading(true);

    try {
        statusSpan.textContent = 'üß† Chain-of-Thought —à–∏–Ω–∂–∏–ª–≥—ç—ç —Ö–∏–π–∂ –±–∞–π–Ω–∞...';

        const formData = new FormData();
        formData.append('user_message', message);

        const response = await fetch('/chat', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        // Add assistant response
        if (data.response) {
            addMessage(data.response, 'assistant', data);
        } else {
            addMessage('–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.', 'assistant');
        }

        statusSpan.textContent = '–ë—ç–ª—ç–Ω –±–∞–π–Ω–∞';

    } catch (error) {
        console.error('Error:', error);
        addMessage('–°–µ—Ä–≤–µ—Ä—Ç —Ö–æ–ª–±–æ–≥–¥–æ—Ö–æ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.', 'assistant');
        statusSpan.textContent = '–ê–ª–¥–∞–∞';
    } finally {
        setFormEnabled(true);
        showLoading(false);
        userInput.focus();
    }
}

// Add message to chat with CoT enhancement detection
function addMessage(content, sender, data = {}) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}`;

    const avatarDiv = document.createElement('div');
    avatarDiv.className = 'message-avatar';
    avatarDiv.textContent = sender === 'user' ? 'üë§' : 'ü§ñ';

    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';

    // Check if this is a CoT-enhanced response
    if (data.cot_enhanced) {
        contentDiv.classList.add('cot-enhanced');

        // Add CoT badge
        const cotBadge = document.createElement('div');
        cotBadge.className = 'cot-badge';
        cotBadge.textContent = 'üß† Chain-of-Thought Enhanced';
        contentDiv.appendChild(cotBadge);
    }

    // Process content for CoT formatting
    if (content.includes('**–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —à–∏–Ω–∂–∏–ª–≥—ç—ç–Ω–∏–π –∞–ª—Ö–º—É—É–¥:**')) {
        formatCotContent(content, contentDiv);
    } else if (content.includes('**–¢–∞–π–ª–∞–Ω –∞–≤–∞—Ö —É—É?**')) {
        // Split content at the report offer
        const parts = content.split('**–¢–∞–π–ª–∞–Ω –∞–≤–∞—Ö —É—É?**');

        // Add the main content
        const mainContent = parts[0].replace(/\n/g, '<br>');
        contentDiv.innerHTML += mainContent;

        // Add the report offer box
        const reportOfferDiv = document.createElement('div');
        reportOfferDiv.className = 'report-offer';
        reportOfferDiv.innerHTML = `
            <strong>üìã –¢–∞–π–ª–∞–Ω –∞–≤–∞—Ö —É—É?</strong>
            ${parts[1].replace(/\n/g, '<br>')}
            <div class="report-buttons">
                <button class="report-button accept" onclick="sendMessage('–¢–∏–π–º—ç—ç')">–¢–∏–π–º—ç—ç, —Ç–∞–π–ª–∞–Ω –∞–≤—ä—è</button>
                <button class="report-button decline" onclick="sendMessage('“Æ–≥“Ø–π, –±–∞—è—Ä–ª–∞–ª–∞–∞')">“Æ–≥“Ø–π, –±–∞—è—Ä–ª–∞–ª–∞–∞</button>
            </div>
        `;
        contentDiv.appendChild(reportOfferDiv);
    } else {
        // Format content with line breaks
        const formattedContent = content.replace(/\n/g, '<br>');
        contentDiv.innerHTML += formattedContent;
    }

    // Add download link if report was generated
    if (data.download_url) {
        const downloadDiv = document.createElement('div');
        downloadDiv.style.marginTop = '10px';

        const downloadLink = document.createElement('a');
        downloadLink.href = data.download_url;
        downloadLink.className = 'download-link';
        downloadLink.textContent = 'üì• PDF –¢–∞–π–ª–∞–Ω —Ç–∞—Ç–∞–∂ –∞–≤–∞—Ö';
        downloadLink.target = '_blank';

        downloadDiv.appendChild(downloadLink);
        contentDiv.appendChild(downloadDiv);
    }

    messageDiv.appendChild(avatarDiv);
    messageDiv.appendChild(contentDiv);

    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Format Chain-of-Thought content
function formatCotContent(content, container) {
    const sections = content.split('\n\n');

    sections.forEach(section => {
        if (section.includes('**–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —à–∏–Ω–∂–∏–ª–≥—ç—ç–Ω–∏–π –∞–ª—Ö–º—É—É–¥:**')) {
            const title = document.createElement('h3');
            title.style.color = '#2c3e50';
            title.style.marginBottom = '10px';
            title.textContent = 'üß† –î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —à–∏–Ω–∂–∏–ª–≥—ç—ç–Ω–∏–π –∞–ª—Ö–º—É—É–¥:';
            container.appendChild(title);
        } else if (section.includes('**') && section.includes('.')) {
            // This is a thinking step
            const stepDiv = document.createElement('div');
            stepDiv.className = 'thinking-step';

            const lines = section.split('\n');
            const title = lines[0].replace(/\*\*/g, '');
            const content = lines.slice(1).join(' ');

            stepDiv.innerHTML = `
                <div class="step-title">${title}</div>
                <div>${content}</div>
                <div class="confidence-bar">
                    <div class="confidence-fill" style="width: ${Math.random() * 40 + 60}%"></div>
                </div>
            `;
            container.appendChild(stepDiv);
        } else if (section.includes('**–ì–æ–ª –¥“Ø–≥–Ω—ç–ª—Ç“Ø“Ø–¥:**')) {
            const insightsDiv = document.createElement('div');
            insightsDiv.className = 'key-insights';
            insightsDiv.innerHTML = '<strong>üîç –ì–æ–ª –¥“Ø–≥–Ω—ç–ª—Ç“Ø“Ø–¥:</strong>';

            const insights = section.split('‚Ä¢').slice(1);
            insights.forEach(insight => {
                if (insight.trim()) {
                    const insightDiv = document.createElement('div');
                    insightDiv.className = 'insight-item';
                    insightDiv.textContent = insight.trim();
                    insightsDiv.appendChild(insightDiv);
                }
            });

            container.appendChild(insightsDiv);
        } else if (section.trim()) {
            const paraDiv = document.createElement('div');
            paraDiv.innerHTML = section.replace(/\n/g, '<br>').replace(/\*\*/g, '<strong>').replace(/\*\*/g, '</strong>');
            paraDiv.style.marginBottom = '10px';
            container.appendChild(paraDiv);
        }
    });
}

// Quick message function
function sendQuickMessage(message) {
    sendMessage(message);
}

// Set form enabled/disabled
function setFormEnabled(enabled) {
    sendButton.disabled = !enabled;
    userInput.disabled = !enabled;
}

// Show/hide loading
function showLoading(show) {
    loading.classList.toggle('active', show);
}

// Refresh cache function
async function refreshCache() {
    try {
        statusSpan.textContent = '–ú—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–∏–ª–∂ –±–∞–π–Ω–∞...';
        cacheStatusSpan.textContent = '–®–∏–Ω—ç—á–∏–ª–∂ –±–∞–π–Ω–∞...';

        const response = await fetch('/cache/refresh', { method: 'POST' });
        const data = await response.json();

        if (data.status === 'success') {
            cacheStatusSpan.textContent = '–ö—ç—à: –®–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω';
            addMessage('‚úÖ –î“Ø“Ø—Ä–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç!', 'assistant');
        } else {
            cacheStatusSpan.textContent = '–ö—ç—à: –ê–ª–¥–∞–∞';
            addMessage('‚ùå –ú—ç–¥—ç—ç–ª—ç–ª —à–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.', 'assistant');
        }

        statusSpan.textContent = '–ë—ç–ª—ç–Ω –±–∞–π–Ω–∞';
    } catch (error) {
        console.error('Cache refresh error:', error);
        cacheStatusSpan.textContent = '–ö—ç—à: –ê–ª–¥–∞–∞';
        statusSpan.textContent = '–ê–ª–¥–∞–∞';
    }
}

// Show Chain-of-Thought statistics
async function showCotStats() {
    try {
        const response = await fetch('/cot/stats');
        const data = await response.json();

        if (data.status === 'success') {
            const stats = data.cot_stats;
            const features = data.features;

            let statsMessage = `üß† **Chain-of-Thought Statistics:**\n\n`;
            statsMessage += `üìä Available Analysis Types: ${stats.available_templates}\n`;
            statsMessage += `üîß Analysis Types: ${stats.analysis_types.join(', ')}\n\n`;
            statsMessage += `‚ú® **Features:**\n`;
            statsMessage += `‚Ä¢ Systematic Reasoning: ${features.systematic_reasoning ? '‚úÖ' : '‚ùå'}\n`;
            statsMessage += `‚Ä¢ Confidence Scoring: ${features.confidence_scoring ? '‚úÖ' : '‚ùå'}\n`;
            statsMessage += `‚Ä¢ Step-by-step Analysis: ${features.step_by_step_analysis ? '‚úÖ' : '‚ùå'}\n`;
            statsMessage += `‚Ä¢ Key Insights Extraction: ${features.key_insights_extraction ? '‚úÖ' : '‚ùå'}\n`;
            statsMessage += `‚Ä¢ Multi-domain Analysis: ${features.multi_domain_analysis ? '‚úÖ' : '‚ùå'}\n`;

            addMessage(statsMessage, 'assistant', { cot_enhanced: true });
        } else {
            addMessage('‚ùå Chain-of-Thought —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.', 'assistant');
        }
    } catch (error) {
        console.error('CoT stats error:', error);
        addMessage('‚ùå Chain-of-Thought —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.', 'assistant');
    }
}

// Check initial status
async function checkStatus() {
    try {
        const [healthResponse, cacheResponse] = await Promise.all([
            fetch('/health'),
            fetch('/cache/status')
        ]);

        const healthData = await healthResponse.json();
        const cacheData = await cacheResponse.json();

        if (healthData.all_ready) {
            statusSpan.textContent = 'üß† –ë—ç–ª—ç–Ω –±–∞–π–Ω–∞ (CoT –∏–¥—ç–≤—Ö—Ç—ç–π)';
        } else {
            statusSpan.textContent = '–≠—Ö–ª“Ø“Ø–ª–∂ –±–∞–π–Ω–∞...';
        }

        if (cacheData.status === 'success' && cacheData.cache.is_fresh) {
            cacheStatusSpan.textContent = `–ö—ç—à: –®–∏–Ω—ç (${cacheData.cache.age_days || 0} ”©–¥”©—Ä)`;
        } else {
            cacheStatusSpan.textContent = '–ö—ç—à: –•—É—É—á–∏—Ä—Å–∞–Ω';
        }

    } catch (error) {
        console.error('Status check error:', error);
        statusSpan.textContent = '–ê–ª–¥–∞–∞';
        cacheStatusSpan.textContent = '–ö—ç—à: –¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π';
    }
}

// Initialize
checkStatus();
userInput.focus();

// Periodic status check
setInterval(checkStatus, 30000); // Check every 30 seconds
import os
import logging
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.templating import Jinja2Templates

from services.chat_service import ChatService
from services.initialization_service import InitializationService

# –û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á–¥—ã–≥ –∞—á–∞–∞–ª–∞—Ö
load_dotenv()

# –õ–æ–≥ —Ç–æ—Ö–∏—Ä–≥–æ–æ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('real_estate_assistant.log')
    ]
)
logger = logging.getLogger(__name__)

# FastAPI —Ç–æ—Ö–∏—Ä–≥–æ–æ
app = FastAPI(title="“Æ–ª —Ö”©–¥–ª”©—Ö —Ö”©—Ä”©–Ω–≥–∏–π–Ω —Ç—É—Å–ª–∞—Ö", version="2.1.0")
templates = Jinja2Templates(directory="templates")

# –ì–ª–æ–±–∞–ª—å —Ö—É–≤—å—Å–∞–≥—á–∏–¥
initialization_service = None
chat_service = None


@app.on_event("startup")
async def startup_event():
    """–°–∏—Å—Ç–µ–º–∏–π–≥ —ç—Ö–ª“Ø“Ø–ª—ç—Ö"""
    global initialization_service, chat_service

    logger.info("üöÄ “Æ–ª —Ö”©–¥–ª”©—Ö —Ö”©—Ä”©–Ω–≥–∏–π–Ω —Ç—É—Å–ª–∞—Ö —Å–µ—Ä–≤–µ—Ä–∏–π–≥ —ç—Ö–ª“Ø“Ø–ª–∂ –±–∞–π–Ω–∞...")
    logger.info("üß† Chain-of-Thought —à–∏–Ω–∂–∏–ª–≥—ç—ç –∏–¥—ç–≤—Ö—Ç—ç–π!")
    logger.info("üìã PDF —Ç–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π!")



    try:
        # –ë“Ø—Ö “Ø–π–ª—á–∏–ª–≥—ç—ç–≥ —ç—Ö–ª“Ø“Ø–ª—ç—Ö
        initialization_service = InitializationService()
        await initialization_service.initialize()

        # –ß–∞—Ç “Ø–π–ª—á–∏–ª–≥—ç—ç–≥ “Ø“Ø—Å–≥—ç—Ö
        chat_service = ChatService(
            llm=initialization_service.llm,
            search_tool=initialization_service.search_tool,
            property_retriever=initialization_service.property_retriever_agent,
            district_analyzer=initialization_service.district_analyzer_agent,
            pdf_generator=initialization_service.pdf_generator
        )

        logger.info("‚úÖ –ë“Ø—Ö –±“Ø—Ä—ç–ª–¥—ç—Ö“Ø“Ø–Ω –∞–º–∂–∏–ª—Ç—Ç–∞–π —ç—Ö—ç–ª—Å—ç–Ω!")
        logger.info("üß† Chain-of-Thought “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞—Ç–∞–π!")
        logger.info("üìã PDF —Ç–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π!")

        # –û–Ω—Ü–ª–æ–≥—É—É–¥—ã–≥ –ª–æ–≥ —Ö–∏–π—Ö
        logger.info("üîç –ë–æ–ª–æ–º–∂—Ç–æ–π —Ñ—É–Ω–∫—Ü—É—É–¥:")
        logger.info("  ‚Ä¢ Unegui.mn –æ—Ä–æ–Ω —Å—É—É—Ü–Ω—ã —à–∏–Ω–∂–∏–ª–≥—ç—ç")
        logger.info("  ‚Ä¢ 9 –¥“Ø“Ø—Ä–≥–∏–π–Ω —Ö–∞—Ä—å—Ü—É—É–ª–∞–ª—Ç")
        logger.info("  ‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω—ç—Ç —Ö–∞–π–ª—Ç")
        logger.info("  ‚Ä¢ CoT —Å—ç—Ç–≥—ç–ª–≥—ç—ç–Ω–∏–π —à–∏–Ω–∂–∏–ª–≥—ç—ç")
        logger.info("  ‚Ä¢ PDF —Ç–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç—Ö")

    except Exception as e:
        logger.error(f"‚ùå –≠—Ö–ª“Ø“Ø–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {e}", exc_info=True)
        logger.error("üîß –û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á –±–æ–ª–æ–Ω —Ö–∞–º–∞–∞—Ä–ª—ã–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É")
        raise


@app.on_event("shutdown")
async def shutdown_event():
    """–°–∏—Å—Ç–µ–º–∏–π–≥ —Ö–∞–∞—Ö"""
    if initialization_service:
        await initialization_service.cleanup()
        logger.info("üßπ “Æ–π–ª—á–∏–ª–≥—ç—ç–Ω“Ø“Ø–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–∞–≥–¥—Å–∞–Ω")


@app.get("/", response_class=HTMLResponse)
async def get_chat_page(request: Request):
    """“Æ–Ω–¥—Å—ç–Ω —á–∞—Ç —Ö—É—É–¥–∞—Å"""
    return templates.TemplateResponse("chat.html", {
        "request": request,
        "version": "2.1.0"
    })


@app.post("/chat")
async def chat_endpoint(request: Request, user_message: str = Form(...)):
    """–ß–∞—Ç —ç–Ω–¥–ø–æ–π–Ω—Ç"""
    logger.info(f"üìù –ú–µ—Å—Å–µ–∂ —Ö“Ø–ª—ç—ç–Ω –∞–≤—Å–∞–Ω: {user_message[:100]}...")

    if not chat_service:
        return {
            "response": "üîß –°–∏—Å—Ç–µ–º–∏–π–≥ —ç—Ö–ª“Ø“Ø–ª–∂ –±–∞–π–Ω–∞. –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø...",
            "offer_report": False,
            "status": "initializing"
        }

    try:
        start_time = datetime.now()
        result = await chat_service.process_message(user_message)
        processing_time = (datetime.now() - start_time).total_seconds()

        # –•—ç—Ä—ç–≥–ª—ç—Å—ç–Ω —Å–∞–π–∂—Ä—É—É–ª–∞–ª—Ç—É—É–¥—ã–≥ —Ç—ç–º–¥—ç–≥–ª—ç—Ö
        enhancements = []
        if result.get("cot_enhanced"):
            enhancements.append("Chain-of-Thought —à–∏–Ω–∂–∏–ª–≥—ç—ç")
        if result.get("report_generated"):
            enhancements.append("PDF —Ç–∞–π–ª–∞–Ω")
        if result.get("search_performed"):
            enhancements.append("–ò–Ω—Ç–µ—Ä–Ω—ç—Ç —Ö–∞–π–ª—Ç")

        logger.info(f"‚úÖ –•–∞—Ä–∏—É “Ø“Ø—Å–≥—ç–≥–¥—Å—ç–Ω: {processing_time:.2f}—Å")
        if enhancements:
            logger.info(f"üöÄ –•—ç—Ä—ç–≥–ª—ç—Å—ç–Ω —Å–∞–π–∂—Ä—É—É–ª–∞–ª—Ç: {', '.join(enhancements)}")

        result.update({
            "processing_time": round(processing_time, 2),
            "enhancements_applied": enhancements,
            "timestamp": datetime.now().isoformat()
        })

        return result

    except Exception as e:
        logger.error(f"‚ùå –ß–∞—Ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}", exc_info=True)
        return {
            "response": "üîß –£—É—á–ª–∞–∞—Ä–∞–π, —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.",
            "offer_report": False,
            "error": str(e),
            "status": "error"
        }


@app.get("/download-report/{filename}")
async def download_report(filename: str):
    """PDF —Ç–∞–π–ª–∞–Ω —Ç–∞—Ç–∞—Ö"""
    try:
        file_path = Path("reports") / filename
        if not file_path.exists():
            logger.warning(f"üìÑ –¢–∞–π–ª–∞–Ω —Ñ–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π: {filename}")
            return JSONResponse(
                status_code=404,
                content={"error": "–§–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π", "filename": filename}
            )

        file_size = file_path.stat().st_size
        logger.info(f"üì• –¢–∞–π–ª–∞–Ω —Ç–∞—Ç–∞–∂ –±–∞–π–Ω–∞: {filename} ({file_size} bytes)")

        return FileResponse(
            path=str(file_path),
            filename=filename,
            media_type='application/pdf',
            headers={
                "Content-Disposition": f"attachment; filename={filename}",
                "Cache-Control": "no-cache"
            }
        )
    except Exception as e:
        logger.error(f"üìÑ –¢–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ {filename}: {e}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={"error": f"–§–∞–π–ª —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {str(e)}"}
        )


@app.get("/health")
async def health():
    """–≠—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω —Å—Ç–∞—Ç—É—Å"""
    health_status = {
        "status": "ok",
        "timestamp": datetime.now().isoformat(),
        "version": "2.1.0",
        "services": {},
        "pdf_engine": "ReportLab"
    }

    if initialization_service:
        health_status["services"] = {
            "llm": initialization_service.llm is not None,
            "search_tool": initialization_service.search_tool is not None,
            "property_retriever": initialization_service.property_retriever_agent is not None,
            "district_analyzer": initialization_service.district_analyzer_agent is not None,
            "pdf_generator": initialization_service.pdf_generator is not None,
            "chat_service": chat_service is not None,
            "chain_of_thought": chat_service.cot_agent is not None if chat_service else False,
        }
    else:
        health_status["services"] = {"initialization_service": False}

    all_ready = all(health_status["services"].values())
    health_status["all_ready"] = all_ready

    if not all_ready:
        health_status["status"] = "degraded"

    return health_status


@app.get("/cache/status")
async def cache_status():
    """–ö—ç—à–∏–π–Ω —Å—Ç–∞—Ç—É—Å"""
    try:
        if not initialization_service or not initialization_service.district_analyzer_agent:
            return {"status": "error", "message": "District analyzer –æ–ª–¥—Å–æ–Ω–≥“Ø–π"}

        cache_info = initialization_service.district_analyzer_agent.get_cache_status()
        return {"status": "success", "cache": cache_info}

    except Exception as e:
        logger.error(f"–ö—ç—à —Å—Ç–∞—Ç—É—Å —à–∞–ª–≥–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        return {"status": "error", "message": str(e)}


@app.post("/cache/refresh")
async def refresh_cache():
    """–ö—ç—à —à–∏–Ω—ç—á–ª—ç—Ö"""
    try:
        if not initialization_service or not initialization_service.district_analyzer_agent:
            return {"status": "error", "message": "District analyzer –æ–ª–¥—Å–æ–Ω–≥“Ø–π"}

        await initialization_service.district_analyzer_agent._update_with_realtime_data()
        return {"status": "success", "message": "–ö—ç—à –∞–º–∂–∏–ª—Ç—Ç–∞–π —à–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω"}

    except Exception as e:
        logger.error(f"–ö—ç—à —à–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
        return {"status": "error", "message": str(e)}


@app.middleware("http")
async def logging_middleware(request: Request, call_next):
    """–õ–æ–≥ —Ö–∏–π—Ö middleware"""
    start_time = datetime.now()
    try:
        response = await call_next(request)
        process_time = (datetime.now() - start_time).total_seconds()
        response.headers["X-Process-Time"] = str(round(process_time, 3))
        return response
    except Exception as e:
        process_time = (datetime.now() - start_time).total_seconds()
        logger.error(f"‚ùå {request.method} {request.url.path} - –ê–ª–¥–∞–∞: {e} - {process_time:.3f}—Å")
        raise


if __name__ == "__main__":
    import uvicorn

    directories = ["reports", "cache", "templates", "static/fonts", "logs"] # static/fonts –Ω—ç–º—Å—ç–Ω
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True) # parents=True –Ω—ç–º—Å—ç–Ω

    logger.info("üöÄ Starting Professional Real Estate Assistant Server v2.1 (ReportLab)...")
    logger.info("üß† Enhanced Chain-of-Thought reasoning active!")
    logger.info("üìã PDF generation with ReportLab enabled!")
    logger.info("üí° Ensure a Mongolian TTF font is in static/fonts/ and correctly configured in xhtml2pdf_generator.py.")

    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )

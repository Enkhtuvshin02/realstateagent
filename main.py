# main.py - ReportLab PDF “Ø“Ø—Å–≥—ç—Ö —à–∏–Ω—ç—á–ª—ç–ª—Ç—ç–π
import os
import logging
import asyncio
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv
from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.templating import Jinja2Templates

# –°–µ—Ä–≤–∏—Å –±–æ–ª–æ–Ω –∞–≥–µ–Ω—Ç—É—É–¥—ã–≥ –∏–º–ø–æ—Ä—Ç–ª–æ—Ö
from services.chat_service import ChatService
from services.initialization_service import InitializationService # ReportLab –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã–≥ —ç—Ö–ª“Ø“Ø–ª–Ω—ç

# –û—Ä—á–Ω—ã —Ö—É–≤—å—Å–∞–≥—á–¥—ã–≥ –∞—á–∞–∞–ª–∞—Ö
load_dotenv()

# –õ–æ–≥–∏–π–≥ –∏–ª“Ø“Ø —Å–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç—Ç–∞–π —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('real_estate_assistant.log')
    ]
)
logger = logging.getLogger(__name__)

# --- FastAPI –ê–ø–ø –¢–æ—Ö–∏—Ä–≥–æ–æ ---
app = FastAPI(
    title="Professional Real Estate Assistant",
    description="Enhanced Real Estate Assistant with PDF Reports (using ReportLab) and Chain-of-Thought Analysis",
    version="2.1.0" # –•—É–≤–∏–ª–±–∞—Ä—ã–Ω —à–∏–Ω—ç—á–ª—ç–ª
)
templates = Jinja2Templates(directory="templates")

# –ì–ª–æ–±–∞–ª—å —Ö—É–≤—å—Å–∞–≥—á–∏–¥
initialization_service = None
chat_service = None


@app.on_event("startup")
async def startup_event():
    """# –≠—Ö–ª—ç—Ö—ç–¥ –±“Ø—Ö –∑“Ø–π–ª–∏–π–≥ –∏–ª“Ø“Ø —Å–∞–π–Ω –∞–ª–¥–∞–∞–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª—Ç—ç–π —ç—Ö–ª“Ø“Ø–ª—ç—Ö"""
    global initialization_service, chat_service

    logger.info("üöÄ Starting Professional Real Estate Assistant v2.1 (with ReportLab)...")
    logger.info("üìÑ PDF generation will use ReportLab.")
    logger.info("üí° Ensure a Mongolian-supporting TTF font is in static/fonts/ and configured in xhtml2pdf_generator.py for proper text rendering.")

    try:
        # Initialize all services
        initialization_service = InitializationService()
        await initialization_service.initialize() # This will initialize ReportLabPDFGenerator

        # Create chat service with all components
        chat_service = ChatService(
            llm=initialization_service.llm,
            search_tool=initialization_service.search_tool,
            property_retriever=initialization_service.property_retriever_agent,
            district_analyzer=initialization_service.district_analyzer_agent,
            pdf_generator=initialization_service.pdf_generator # This is now the ReportLab one
        )

        logger.info("‚úÖ All components initialized successfully!")
        logger.info("üß† Chain-of-Thought reasoning is active!")
        logger.info("üìã PDF reports using ReportLab are enabled!")

        # Log system capabilities
        logger.info("üîç Available features:")
        logger.info("  ‚Ä¢ Property URL analysis with unegui.mn integration")
        logger.info("  ‚Ä¢ District comparison across 9 Ulaanbaatar districts")
        logger.info("  ‚Ä¢ Real-time market research with internet search")
        logger.info("  ‚Ä¢ Chain-of-Thought enhanced reasoning")
        logger.info("  ‚Ä¢ PDF report generation (ReportLab)")

    except Exception as e:
        logger.error(f"‚ùå Failed to initialize services: {e}", exc_info=True) # Added exc_info for more details
        logger.error("üîß Please check your environment variables and dependencies (including ReportLab and required fonts)")
        raise


@app.on_event("shutdown")
async def shutdown_event():
    """# –£–Ω—Ç—Ä–∞–∞—Ö–∞–¥ —Ü—ç–≤—ç—Ä–ª—ç—Ö"""
    if initialization_service:
        await initialization_service.cleanup()
        logger.info("üßπ Services cleaned up successfully")


@app.get("/", response_class=HTMLResponse)
async def get_chat_page(request: Request):
    """# –°–∞–π–∂—Ä—É—É–ª—Å–∞–Ω –∏–Ω—Ç–µ—Ä—Ñ—ç–π—Å—Ç—ç–π “Ø–Ω–¥—Å—ç–Ω —á–∞—Ç —Ö—É—É–¥–∞—Å"""
    # Removed WeasyPrint specific variables from template context
    return templates.TemplateResponse("chat.html", {
        "request": request,
        "pdf_engine_name": "ReportLab", # Indicate ReportLab is used
        "version": "2.1.0"
    })


@app.post("/chat")
async def chat_endpoint(request: Request, user_message: str = Form(...)):
    """# PDF “Ø“Ø—Å–≥—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π —Å–∞–π–∂—Ä—É—É–ª—Å–∞–Ω —á–∞—Ç —Ü—ç–≥"""
    logger.info(f"üìù Chat message received: {user_message[:100]}{'...' if len(user_message) > 100 else ''}")

    if not chat_service:
        return {
            "response": "üîß –°–∏—Å—Ç–µ–º–∏–π–≥ —ç—Ö–ª“Ø“Ø–ª–∂ –±–∞–π–Ω–∞. –¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø...",
            "offer_report": False,
            "status": "initializing"
        }

    try:
        start_time = datetime.now()
        result = await chat_service.process_message(user_message)
        processing_time = (datetime.now() - start_time).total_seconds()

        enhancements = []
        if result.get("cot_enhanced"):
            enhancements.append("Chain-of-Thought reasoning")
        if result.get("report_generated"):
            enhancements.append("ReportLab PDF report") # Updated
        if result.get("search_performed"):
            enhancements.append("Internet search")

        logger.info(f"‚úÖ Response generated in {processing_time:.2f}s")
        if enhancements:
            logger.info(f"üöÄ Applied enhancements: {', '.join(enhancements)}")

        result.update({
            "processing_time": round(processing_time, 2),
            "enhancements_applied": enhancements,
            "pdf_engine_name": "ReportLab", # Updated
            "timestamp": datetime.now().isoformat()
        })

        return result

    except Exception as e:
        logger.error(f"‚ùå Chat processing error: {e}", exc_info=True)
        return {
            "response": "üîß –£—É—á–ª–∞–∞—Ä–∞–π, —Ç–µ—Ö–Ω–∏–∫–∏–π–Ω –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.",
            "offer_report": False,
            "error": str(e),
            "status": "error"
        }


@app.get("/download-report/{filename}")
async def download_report(filename: str):
    """# –°–∞–π–∂—Ä—É—É–ª—Å–∞–Ω –∞–ª–¥–∞–∞–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª—Ç—ç–π PDF —Ç–∞–π–ª–∞–Ω —Ç–∞—Ç–∞—Ö"""
    try:
        file_path = Path("reports") / filename
        if not file_path.exists():
            logger.warning(f"üìÑ Report file not found: {filename}")
            return JSONResponse(
                status_code=404,
                content={"error": "–§–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π", "filename": filename}
            )

        file_size = file_path.stat().st_size
        logger.info(f"üì• Downloading report: {filename} ({file_size} bytes)")

        return FileResponse(
            path=str(file_path),
            filename=filename,
            media_type='application/pdf',
            headers={
                "Content-Disposition": f"attachment; filename={filename}",
                "Cache-Control": "no-cache"
            }
        )
    except Exception as e:
        logger.error(f"üìÑ Download error for {filename}: {e}", exc_info=True)
        return JSONResponse(
            status_code=500,
            content={"error": f"–§–∞–π–ª —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {str(e)}"}
        )


@app.get("/health")
async def health():
    """# –°–∞–π–∂—Ä—É—É–ª—Å–∞–Ω —ç—Ä“Ø“Ø–ª –±–∞–π–¥–ª—ã–≥ —à–∞–ª–≥–∞—Ö —Ü—ç–≥"""
    health_status = {
        "status": "ok",
        "timestamp": datetime.now().isoformat(),
        "version": "2.1.0",
        "services": {},
        "pdf_capabilities": {
            "engine": "ReportLab", # Updated
            "status": "Active. Ensure fonts are correctly configured for full language support."
        }
    }

    if initialization_service:
        health_status["services"] = {
            "llm": initialization_service.llm is not None,
            "search_tool": initialization_service.search_tool is not None,
            "property_retriever": initialization_service.property_retriever_agent is not None,
            "district_analyzer": initialization_service.district_analyzer_agent is not None,
            "pdf_generator": initialization_service.pdf_generator is not None, # Checks ReportLab generator
            "chat_service": chat_service is not None,
            "chain_of_thought": chat_service.cot_agent is not None if chat_service else False,
        }
    else:
        health_status["services"] = {
            "initialization_service": False
        }

    all_services_ready = all(health_status["services"].values())
    health_status["all_ready"] = all_services_ready

    if not all_services_ready:
        health_status["status"] = "degraded"

    return health_status

# WeasyPrint-–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω —Å—Ç–∞—Ç—É—Å —Ü—ç–≥“Ø“Ø–¥–∏–π–≥ —Ö–∞—Å—Å–∞–Ω (/weasyprint/status, /pdf/status)
# —É—á–∏—Ä –Ω—å —Ç—ç–¥ WeasyPrint-–¥ –º–∞—à –∏—Ö —Ç”©–≤–ª”©—Ä—Å”©–Ω –±–∞–π—Å–∞–Ω. –®–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π –±–æ–ª ReportLab-–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω —à–∏–Ω—ç /pdf/status “Ø“Ø—Å–≥—ç–∂ –±–æ–ª–Ω–æ.

@app.middleware("http")
async def enhanced_logging_middleware(request: Request, call_next):
    start_time = datetime.now()
    try:
        response = await call_next(request)
        process_time = (datetime.now() - start_time).total_seconds()
        response.headers["X-Process-Time"] = str(round(process_time, 3))
        response.headers["X-PDF-Engine"] = "ReportLab" # Updated
        return response
    except Exception as e:
        process_time = (datetime.now() - start_time).total_seconds()
        logger.error(f"‚ùå {request.method} {request.url.path} - Error: {e} - {process_time:.3f}s", exc_info=True)
        raise


if __name__ == "__main__":
    import uvicorn

    directories = ["reports", "cache", "templates", "static/fonts", "logs"] # static/fonts –Ω—ç–º—Å—ç–Ω
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True) # parents=True –Ω—ç–º—Å—ç–Ω

    logger.info("üöÄ Starting Professional Real Estate Assistant Server v2.1 (ReportLab)...")
    logger.info("üß† Enhanced Chain-of-Thought reasoning active!")
    logger.info("üìã PDF generation with ReportLab enabled!")
    logger.info("üí° Ensure a Mongolian TTF font is in static/fonts/ and correctly configured in xhtml2pdf_generator.py.")

    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )

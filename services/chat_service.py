# services/chat_service.py - –•—è–ª–±–∞—Ä—à—É—É–ª—Å–∞–Ω —á–∞—Ç “Ø–π–ª—á–∏–ª–≥—ç—ç
import logging
import re
import json
from datetime import datetime
from typing import Dict, Any
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser

from services.report_service import ReportService
from agents.chain_of_thought_agent import ChainOfThoughtAgent

logger = logging.getLogger(__name__)

# –¢–æ–≥—Ç–º–æ–ª —É—Ç–≥—É—É–¥ - —Ö—è–ª–±–∞—Ä—à—É—É–ª—Å–∞–Ω
REPORT_KEYWORDS = ['—Ç–∏–π–º—ç—ç', '—Ç–∏–π–º', 'yes', '—Ç–∞–π–ª–∞–Ω']
DISTRICT_NAMES = ["—Ö–∞–Ω-—É—É–ª", "–±–∞—è–Ω–≥–æ–ª", "—Å“Ø—Ö–±–∞–∞—Ç–∞—Ä", "—á–∏–Ω–≥—ç–ª—Ç—ç–π", "–±–∞—è–Ω–∑“Ø—Ä—Ö", "—Å–æ–Ω–≥–∏–Ω–æ—Ö–∞–π—Ä—Ö–∞–Ω"]


class ChatService:
    """“Æ–ª —Ö”©–¥–ª”©—Ö —Ö”©—Ä”©–Ω–≥–∏–π–Ω —á–∞—Ç “Ø–π–ª—á–∏–ª–≥—ç—ç - —Ö—è–ª–±–∞—Ä—à—É—É–ª—Å–∞–Ω —Ö—É–≤–∏–ª–±–∞—Ä"""

    def __init__(self, llm, search_tool, property_retriever, district_analyzer, pdf_generator):
        self.llm = llm
        self.search_tool = search_tool
        self.property_retriever = property_retriever
        self.district_analyzer = district_analyzer
        self.pdf_generator = pdf_generator

        # –î—ç–¥ “Ø–π–ª—á–∏–ª–≥—ç—ç–Ω“Ø“Ø–¥
        self.report_service = ReportService(llm, district_analyzer, pdf_generator, search_tool)
        self.cot_agent = ChainOfThoughtAgent(llm)

        # –°“Ø“Ø–ª–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç–Ω“Ø“Ø–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö
        self.last_property = None
        self.last_district = None

    async def process_message(self, user_message: str) -> Dict[str, Any]:
        """–ú–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö - –≥–æ–ª —Ñ—É–Ω–∫—Ü"""
        logger.info(f"–ú–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ –±–∞–π–Ω–∞: {user_message[:50]}...")

        try:
            # –¢–∞–π–ª–∞–Ω —Ö“Ø—Å—ç—Ö —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
            if self._wants_report(user_message):
                return await self._generate_report()

            # –ú–µ—Å—Å–µ–∂–∏–π–Ω —Ç”©—Ä–ª–∏–π–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö
            message_type = self._classify_message(user_message)

            # CoT —Ö—ç—Ä—ç–≥–ª—ç—Ö —ç—Å—ç—Ö–∏–π–≥ —à–∏–π–¥—ç—Ö
            use_cot = len(user_message) > 30 or message_type in ['property', 'district']

            # –ú–µ—Å—Å–µ–∂–∏–π–Ω —Ç”©—Ä–ª”©”©—Ä –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
            if message_type == 'property':
                return await self._handle_property(user_message, use_cot)
            elif message_type == 'district':
                return await self._handle_district(user_message, use_cot)
            elif message_type == 'market':
                return await self._handle_market(user_message, use_cot)
            else:
                return await self._handle_general(user_message)

        except Exception as e:
            logger.error(f"–ú–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
            return {"response": "–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.", "offer_report": False}

    def _classify_message(self, message: str) -> str:
        """–ú–µ—Å—Å–µ–∂–∏–π–Ω —Ç”©—Ä–ª–∏–π–≥ –∞–Ω–≥–∏–ª–∞—Ö"""
        message_lower = message.lower()

        # URL —à–∞–ª–≥–∞—Ö
        if re.search(r'https?://\S+', message):
            return 'property'

        # –î“Ø“Ø—Ä–≥–∏–π–Ω –Ω—ç—Ä —à–∞–ª–≥–∞—Ö
        if any(district in message_lower for district in DISTRICT_NAMES):
            return 'district'

        # –ó–∞—Ö –∑—ç—ç–ª–∏–π–Ω —Ç“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥ —à–∞–ª–≥–∞—Ö
        market_keywords = ['–∑–∞—Ö –∑—ç—ç–ª', '“Ø–Ω–∏–π–Ω —á–∏–≥–ª—ç–ª', 'market', '—Ç—Ä–µ–Ω–¥', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫']
        if any(keyword in message_lower for keyword in market_keywords):
            return 'market'

        return 'general'

    def _wants_report(self, message: str) -> bool:
        """–¢–∞–π–ª–∞–Ω —Ö“Ø—Å—ç–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö"""
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in REPORT_KEYWORDS) and len(message) < 50

    async def _handle_property(self, message: str, use_cot: bool) -> Dict[str, Any]:
        """–û—Ä–æ–Ω —Å—É—É—Ü–Ω—ã URL –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö"""
        url_match = re.search(r'https?://\S+', message)
        if not url_match:
            return {"response": "URL –æ–ª–¥—Å–æ–Ω–≥“Ø–π.", "offer_report": False}

        url = url_match.group(0)
        logger.info(f"–û—Ä–æ–Ω —Å—É—É—Ü–Ω—ã URL –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ –±–∞–π–Ω–∞: {url}")

        try:
            # –û—Ä–æ–Ω —Å—É—É—Ü–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞—Ö
            property_data = await self.property_retriever.retrieve_property_details(url)
            if property_data.get("error"):
                return {"response": f"–ú—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {property_data['error']}", "offer_report": False}

            # –î“Ø“Ø—Ä–≥–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç
            district_analysis = await self._get_district_analysis(property_data.get("district"))

            # –•–∞—Ä–∏—É “Ø“Ø—Å–≥—ç—Ö
            response = await self._generate_property_response(message, property_data, district_analysis)

            # CoT —Å–∞–π–∂—Ä—É—É–ª–∞–ª—Ç
            if use_cot:
                response = await self.cot_agent.enhance_response_with_reasoning(
                    response, "property_analysis",
                    {"property": property_data, "district": district_analysis}, message
                )

            # –ú—ç–¥—ç—ç–ª—ç–ª —Ö–∞–¥–≥–∞–ª–∞—Ö
            self.last_property = {"property_data": property_data, "district_analysis": district_analysis, "url": url}

            return {
                "response": response + "\n\nüè† **–¢–∞–π–ª–∞–Ω –∞–≤–∞—Ö —É—É?**\n–üDF —Ç–∞–π–ª–∞–Ω –∞–≤–∞—Ö—ã–≥ —Ö“Ø—Å–≤—ç–ª **'–¢–∏–π–º—ç—ç'** –≥—ç–∂ –±–∏—á–Ω—ç “Ø“Ø.",
                "offer_report": True,
                "cot_enhanced": use_cot
            }

        except Exception as e:
            logger.error(f"–û—Ä–æ–Ω —Å—É—É—Ü –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
            return {"response": "–û—Ä–æ–Ω —Å—É—É—Ü–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.", "offer_report": False}

    async def _handle_district(self, message: str, use_cot: bool) -> Dict[str, Any]:
        """–î“Ø“Ø—Ä–≥–∏–π–Ω –∞—Å—É—É–ª—Ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö"""
        logger.info("–î“Ø“Ø—Ä–≥–∏–π–Ω –∞—Å—É—É–ª—Ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ –±–∞–π–Ω–∞")

        try:
            district_analysis = await self.district_analyzer.analyze_district(message)
            response = await self._generate_district_response(message, district_analysis)

            if use_cot:
                response = await self.cot_agent.enhance_response_with_reasoning(
                    response, "district_comparison",
                    {"analysis": district_analysis, "query": message}, message
                )

            self.last_district = {"analysis": district_analysis, "query": message}

            return {
                "response": response + "\n\nüìä **–¢–∞–π–ª–∞–Ω –∞–≤–∞—Ö —É—É?**\n–î“Ø“Ø—Ä–≥–∏–π–Ω PDF —Ç–∞–π–ª–∞–Ω –∞–≤–∞—Ö—ã–≥ —Ö“Ø—Å–≤—ç–ª **'–¢–∏–π–º—ç—ç'** –≥—ç–∂ –±–∏—á–Ω—ç “Ø“Ø.",
                "offer_report": True,
                "cot_enhanced": use_cot
            }

        except Exception as e:
            logger.error(f"–î“Ø“Ø—Ä—ç–≥ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
            return {"response": "–î“Ø“Ø—Ä–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.", "offer_report": False}

    async def _handle_market(self, message: str, use_cot: bool) -> Dict[str, Any]:
        """–ó–∞—Ö –∑—ç—ç–ª–∏–π–Ω –∞—Å—É—É–ª—Ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö"""
        logger.info("–ó–∞—Ö –∑—ç—ç–ª–∏–π–Ω –∞—Å—É—É–ª—Ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ –±–∞–π–Ω–∞")

        try:
            search_results = self.search_tool.invoke({"query": message})
            response = await self._generate_market_response(message, search_results)

            if use_cot:
                response = await self.cot_agent.enhance_response_with_reasoning(
                    response, "market_research",
                    {"search": search_results, "query": message}, message
                )

            return {
                "response": response + "\n\nüìà **–¢–∞–π–ª–∞–Ω –∞–≤–∞—Ö —É—É?**\n–ó–∞—Ö –∑—ç—ç–ª–∏–π–Ω PDF —Ç–∞–π–ª–∞–Ω –∞–≤–∞—Ö—ã–≥ —Ö“Ø—Å–≤—ç–ª **'–¢–∏–π–º—ç—ç'** –≥—ç–∂ –±–∏—á–Ω—ç “Ø“Ø.",
                "offer_report": True,
                "cot_enhanced": use_cot
            }

        except Exception as e:
            logger.error(f"–ó–∞—Ö –∑—ç—ç–ª –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
            return {"response": "–ó–∞—Ö –∑—ç—ç–ª–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.", "offer_report": False}

    async def _handle_general(self, message: str) -> Dict[str, Any]:
        """–ï—Ä”©–Ω—Ö–∏–π –∞—Å—É—É–ª—Ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö"""
        try:
            search_results = self.search_tool.invoke({"query": message})
            response = await self._generate_general_response(message, search_results)
            return {"response": response, "offer_report": False}

        except Exception as e:
            logger.error(f"–ï—Ä”©–Ω—Ö–∏–π –∞—Å—É—É–ª—Ç –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
            return {"response": "–•–∞–π–ª—Ç —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.", "offer_report": False}

    async def _generate_report(self) -> Dict[str, Any]:
        """–¢–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç—Ö"""
        try:
            if self.last_property:
                result = await self.report_service.generate_property_report(self.last_property)
            elif self.last_district:
                result = await self.report_service.generate_district_report()
            else:
                result = await self.report_service.generate_comprehensive_market_report()

            if isinstance(result, dict) and result.get("success"):
                return {
                    "response": result["message"],
                    "download_url": result["download_url"],
                    "filename": result["filename"],
                    "offer_report": False
                }
            else:
                return {"response": str(result), "offer_report": False}

        except Exception as e:
            logger.error(f"–¢–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞: {e}")
            return {"response": "–¢–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.", "offer_report": False}

    async def _get_district_analysis(self, district: str) -> str:
        """–î“Ø“Ø—Ä–≥–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç –∞–≤–∞—Ö"""
        if district and district != "N/A":
            return await self.district_analyzer.analyze_district(district)
        return "–î“Ø“Ø—Ä–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π."

    async def _generate_property_response(self, query: str, property_data: Dict, district_analysis: str) -> str:
        """–û—Ä–æ–Ω —Å—É—É—Ü–Ω—ã —Ö–∞—Ä–∏—É “Ø“Ø—Å–≥—ç—Ö"""
        prompt = ChatPromptTemplate.from_messages([
            ("system", """You are a professional real estate expert. Analyze this property and provide valuable insights.

Focus on:
1. Price evaluation - is it fair value?
2. Location benefits and drawbacks  
3. Investment potential with numbers
4. Key recommendations

Be specific, use numbers, and provide actionable advice.
IMPORTANT: Respond ONLY in Mongolian language."""),
            ("human",
             "User query: {query}\nProperty details: {property}\nDistrict analysis: {district}\n\nProvide property analysis in Mongolian.")
        ])

        chain = prompt | self.llm | StrOutputParser()
        return await chain.ainvoke({
            "query": query,
            "property": json.dumps(property_data, ensure_ascii=False),
            "district": district_analysis
        })

    async def _generate_district_response(self, query: str, district_analysis: str) -> str:
        """–î“Ø“Ø—Ä–≥–∏–π–Ω —Ö–∞—Ä–∏—É “Ø“Ø—Å–≥—ç—Ö"""
        prompt = ChatPromptTemplate.from_messages([
            ("system", """You are a real estate market analyst. Provide clear district analysis with specific insights.

Focus on:
1. Current price levels with numbers
2. Comparison to other districts
3. Investment opportunities 
4. Who should buy here
5. Future outlook

Be specific and provide actionable recommendations.
IMPORTANT: Respond ONLY in Mongolian language."""),
            ("human", "User query: {query}\nDistrict analysis: {analysis}\n\nProvide district analysis in Mongolian.")
        ])

        chain = prompt | self.llm | StrOutputParser()
        return await chain.ainvoke({"query": query, "analysis": district_analysis})

    async def _generate_market_response(self, query: str, search_results: Any) -> str:
        """–ó–∞—Ö –∑—ç—ç–ª–∏–π–Ω —Ö–∞—Ä–∏—É “Ø“Ø—Å–≥—ç—Ö"""
        prompt = ChatPromptTemplate.from_messages([
            ("system", """You are a real estate market researcher. Analyze search results and provide valuable market insights.

Focus on:
1. Current market conditions
2. Price trends with specifics
3. Investment opportunities
4. Risks to watch
5. Actionable recommendations

Be specific with data and provide clear guidance.
IMPORTANT: Respond ONLY in Mongolian language."""),
            ("human", "User query: {query}\nSearch results: {results}\n\nProvide market analysis in Mongolian.")
        ])

        chain = prompt | self.llm | StrOutputParser()
        return await chain.ainvoke({"query": query, "results": search_results})

    async def _generate_general_response(self, query: str, search_results: Any) -> str:
        """–ï—Ä”©–Ω—Ö–∏–π —Ö–∞—Ä–∏—É “Ø“Ø—Å–≥—ç—Ö"""
        prompt = ChatPromptTemplate.from_messages([
            ("system", """You are a professional real estate assistant specializing in Mongolia's property market. 
Provide clear, helpful answers based on search results.

Provide:
- Direct answer to the user's question
- Relevant facts and data
- Practical advice if applicable
- Clear, actionable information

IMPORTANT: Respond ONLY in Mongolian language."""),
            ("human", "User question: {query}\nSearch results: {results}\n\nProvide answer in Mongolian.")
        ])

        chain = prompt | self.llm | StrOutputParser()
        return await chain.ainvoke({"query": query, "results": search_results})
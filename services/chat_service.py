# services/chat_service.py
import logging
import re
import json
from datetime import datetime
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser

from services.report_service import ReportService

logger = logging.getLogger(__name__)


class ChatService:
    def __init__(self, llm, search_tool, property_retriever, district_analyzer, pdf_generator):
        self.llm = llm
        self.search_tool = search_tool
        self.property_retriever = property_retriever
        self.district_analyzer = district_analyzer
        self.pdf_generator = pdf_generator

        # Initialize enhanced report service with search integration
        self.report_service = ReportService(
            llm=llm,
            district_analyzer=district_analyzer,
            pdf_generator=pdf_generator,
            search_tool=search_tool
        )

        # Store last analysis for report generation
        self.last_property_analysis = None
        self.last_district_analysis = None
        self.last_response_type = None

    async def process_message(self, user_message: str) -> dict:
        """Process user message and return structured response"""
        logger.info(f"üîÑ Processing message: {user_message}")

        try:
            # Check if this is a report acceptance response
            if self._is_report_acceptance(user_message):
                return await self._generate_report_based_on_context()

            # Determine message type and route accordingly
            message_type = self._classify_message(user_message)
            logger.info(f"üìã Message classified as: {message_type}")

            if message_type == "report_request":
                return await self._handle_report_request(user_message)
            elif message_type == "property_url":
                return await self._handle_property_url(user_message)
            elif message_type == "district_query":
                return await self._handle_district_query(user_message)
            elif message_type == "market_research":
                return await self._handle_market_research(user_message)
            else:
                return await self._handle_general_query(user_message)

        except Exception as e:
            logger.error(f"‚ùå Error in process_message: {e}", exc_info=True)
            return {
                "response": "–£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.",
                "offer_report": False,
                "error": str(e)
            }

    def _is_report_acceptance(self, message: str) -> bool:
        """Check if user is accepting a report offer"""
        acceptance_keywords = [
            '—Ç–∏–π–º—ç—ç', '—Ç–∏–π–º', 'yes', '—Ç–∞–π–ª–∞–Ω —Ö“Ø—Å—ç–∂ –±–∞–π–Ω–∞',
            '—Ö“Ø—Å—ç–∂ –±–∞–π–Ω–∞', '–≥–∞—Ä–≥–∞–Ω–∞ —É—É', '“Ø“Ø—Å–≥—ç–Ω—ç “Ø“Ø'
        ]
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in acceptance_keywords) and len(message) < 50

    async def _generate_report_based_on_context(self) -> dict:
        """Generate report based on last response type"""
        if self.last_response_type == "property" and self.last_property_analysis:
            result = await self.report_service.generate_property_report(self.last_property_analysis)
        elif self.last_response_type == "district" and self.last_district_analysis:
            result = await self.report_service.generate_district_report()
        else:
            result = await self.report_service.generate_comprehensive_market_report()

        if isinstance(result, dict) and result.get("success"):
            return {
                "response": result["message"],
                "download_url": result["download_url"],
                "filename": result["filename"],
                "offer_report": False,
                "report_generated": True
            }
        else:
            return {
                "response": str(result),
                "offer_report": False
            }

    def _classify_message(self, message: str) -> str:
        """Classify the type of user message"""
        message_lower = message.lower()

        # Check for URL
        if re.search(r'https?://\S+', message):
            return "property_url"

        # Check for explicit report requests
        report_keywords = [
            '—Ç–∞–π–ª–∞–Ω', 'report', 'pdf', '—Ç–∞—Ç–∞–∂ –∞–≤–∞—Ö', 'download',
            '—Ç–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç—Ö', 'generate report'
        ]
        if any(keyword in message_lower for keyword in report_keywords):
            return "report_request"

        # Check for district queries
        districts = [
            "—Ö–∞–Ω-—É—É–ª", "–±–∞—è–Ω–≥–æ–ª", "—Å“Ø—Ö–±–∞–∞—Ç–∞—Ä", "—á–∏–Ω–≥—ç–ª—Ç—ç–π",
            "–±–∞—è–Ω–∑“Ø—Ä—Ö", "—Å–æ–Ω–≥–∏–Ω–æ—Ö–∞–π—Ä—Ö–∞–Ω", "–±–∞–≥–∞–Ω—É—É—Ä", "–Ω–∞–ª–∞–π—Ö", "–±–∞–≥–∞—Ö–∞–Ω–≥–∞–π"
        ]
        location_keywords = ["–¥“Ø“Ø—Ä—ç–≥", "–±–∞–π—Ä—à–∏–ª", "—Ö–æ—Ç", "–≥–∞–∑–∞—Ä", "–æ—Ä–æ–Ω —Å—É—É—Ü", "–±–∞–π—Ä"]

        has_district = any(district in message_lower for district in districts)
        has_location_context = any(keyword in message_lower for keyword in location_keywords)

        if has_district or has_location_context:
            return "district_query"

        # Check for market research queries
        market_keywords = [
            "–∑–∞—Ö –∑—ç—ç–ª", "“Ø–Ω–∏–π–Ω —á–∏–≥–ª—ç–ª", "market", "—Ç—Ä–µ–Ω–¥", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫",
            "—Ö”©—Ä”©–Ω–≥”© –æ—Ä—É—É–ª–∞–ª—Ç", "investment", "–∑—ç—ç–ª", "–∏–ø–æ—Ç–µ–∫"
        ]
        if any(keyword in message_lower for keyword in market_keywords):
            return "market_research"

        return "general"

    async def _handle_property_url(self, user_message: str) -> dict:
        """Handle property URL analysis"""
        url_match = re.search(r'https?://\S+', user_message)
        if not url_match:
            return {
                "response": "URL –æ–ª–¥—Å–æ–Ω–≥“Ø–π.",
                "offer_report": False
            }

        url = url_match.group(0)
        logger.info(f"üè† Processing property URL: {url}")

        try:
            # Extract property details
            property_details = await self.property_retriever.retrieve_property_details(url)

            if property_details.get("error"):
                return {
                    "response": f"–ú—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞–∂ –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {property_details['error']}",
                    "offer_report": False
                }

            # Get district analysis
            location = property_details.get("district", "–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä")
            if location and location != "N/A":
                district_analysis = await self.district_analyzer.analyze_district(location)
            else:
                district_analysis = "–î“Ø“Ø—Ä–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª —Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π –±–∞–π–Ω–∞."

            # Generate comprehensive response
            response = await self._generate_enhanced_property_response(
                user_message, property_details, district_analysis, url
            )

            # Store for potential report generation
            self.last_property_analysis = {
                "property_details": property_details,
                "district_analysis": district_analysis,
                "url": url,
                "timestamp": datetime.now().isoformat()
            }
            self.last_response_type = "property"

            # Always offer report after property analysis
            return {
                "response": response + "\n\nüè† **–¢–∞–π–ª–∞–Ω –∞–≤–∞—Ö —É—É?**\n–≠–Ω—ç –æ—Ä–æ–Ω —Å—É—É—Ü–Ω—ã –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π PDF —Ç–∞–π–ª–∞–Ω –∞–≤–∞—Ö—ã–≥ —Ö“Ø—Å–≤—ç–ª **'–¢–∏–π–º—ç—ç'** –≥—ç–∂ –±–∏—á–Ω—ç “Ø“Ø.",
                "offer_report": True,
                "report_type": "property",
                "property_analyzed": True
            }

        except Exception as e:
            logger.error(f"‚ùå Error processing property URL: {e}")
            return {
                "response": f"URL –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}",
                "offer_report": False
            }

    async def _handle_district_query(self, user_message: str) -> dict:
        """Handle district-related queries"""
        logger.info("üìç Processing district query")

        try:
            # Find district name in message
            district_name = self._extract_district_name(user_message)

            # Get district analysis
            district_analysis = await self.district_analyzer.analyze_district(
                district_name if district_name else user_message
            )

            # Generate enhanced response
            response = await self._generate_enhanced_district_response(
                user_message, district_analysis, district_name
            )

            # Store for potential report
            self.last_district_analysis = {
                "district_analysis": district_analysis,
                "query": user_message,
                "district_name": district_name,
                "timestamp": datetime.now().isoformat()
            }
            self.last_response_type = "district"

            # Always offer report after district analysis
            return {
                "response": response + "\n\nüìä **–¢–∞–π–ª–∞–Ω –∞–≤–∞—Ö —É—É?**\n–î“Ø“Ø—Ä–≥–∏–π–Ω —Ö–∞—Ä—å—Ü—É—É–ª–∞–ª—Ç—ã–Ω PDF —Ç–∞–π–ª–∞–Ω –∞–≤–∞—Ö—ã–≥ —Ö“Ø—Å–≤—ç–ª **'–¢–∏–π–º—ç—ç'** –≥—ç–∂ –±–∏—á–Ω—ç “Ø“Ø.",
                "offer_report": True,
                "report_type": "district",
                "district_analyzed": True
            }

        except Exception as e:
            logger.error(f"‚ùå Error processing district query: {e}")
            return {
                "response": "–î“Ø“Ø—Ä–≥–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.",
                "offer_report": False
            }

    async def _handle_market_research(self, user_message: str) -> dict:
        """Handle market research queries"""
        logger.info("üîç Processing market research query")

        try:
            # Perform targeted search
            search_results = self.search_tool.invoke({"query": user_message})

            # Generate comprehensive response
            response = await self._generate_market_research_response(
                user_message, search_results
            )

            self.last_response_type = "market"

            # Always offer report after market research
            return {
                "response": response + "\n\nüìà **–¢–∞–π–ª–∞–Ω –∞–≤–∞—Ö —É—É?**\n–ó–∞—Ö –∑—ç—ç–ª–∏–π–Ω –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π PDF —Ç–∞–π–ª–∞–Ω –∞–≤–∞—Ö—ã–≥ —Ö“Ø—Å–≤—ç–ª **'–¢–∏–π–º—ç—ç'** –≥—ç–∂ –±–∏—á–Ω—ç “Ø“Ø.",
                "offer_report": True,
                "report_type": "comprehensive",
                "search_performed": True
            }

        except Exception as e:
            logger.error(f"‚ùå Error processing market research: {e}")
            return {
                "response": "–ó–∞—Ö –∑—ç—ç–ª–∏–π–Ω —Å—É–¥–∞–ª–≥–∞–∞ —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.",
                "offer_report": False
            }

    async def _handle_general_query(self, user_message: str) -> dict:
        """Handle general real estate queries"""
        logger.info("üîç Processing general query")

        try:
            # Use search for general queries
            search_results = self.search_tool.invoke({"query": user_message})

            # Generate response using LLM
            prompt = ChatPromptTemplate.from_messages([
                ("system", """–¢–∞ –±–æ–ª “Ø–ª —Ö”©–¥–ª”©—Ö —Ö”©—Ä”©–Ω–≥–∏–π–Ω —Ç—É—Å–ª–∞—Ö. –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç–∞–¥ –∏–Ω—Ç–µ—Ä–Ω—ç—Ç—ç—ç—Å —Ö–∞–π—Å–∞–Ω –º—ç–¥—ç—ç–ª—ç–ª–¥ “Ø–Ω–¥—ç—Å–ª—ç–Ω —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É. 

–ú–æ–Ω–≥–æ–ª —É–ª—Å—ã–Ω “Ø–ª —Ö”©–¥–ª”©—Ö —Ö”©—Ä”©–Ω–≥–∏–π–Ω –∑–∞—Ö –∑—ç—ç–ª–¥ –∞–Ω—Ö–∞–∞—Ä–ª–∞–∞ —Ö–∞–Ω–¥—É—É–ª–Ω–∞ —É—É. –ó”©–≤—Ö”©–Ω –ú–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É."""),
                ("human", "–ê—Å—É—É–ª—Ç: {query}\n–•–∞–π–ª—Ç—ã–Ω “Ø—Ä –¥“Ø–Ω: {search_results}")
            ])

            chain = prompt | self.llm | StrOutputParser()
            response = await chain.ainvoke({
                "query": user_message,
                "search_results": search_results
            })

            self.last_response_type = "general"

            # For general queries, offer report if it seems substantial
            if len(response) > 200:
                return {
                    "response": response + "\n\nüìÑ **–¢–∞–π–ª–∞–Ω –∞–≤–∞—Ö —É—É?**\n–≠–Ω—ç –º—ç–¥—ç—ç–ª–ª–∏–π–Ω PDF —Ç–∞–π–ª–∞–Ω –∞–≤–∞—Ö—ã–≥ —Ö“Ø—Å–≤—ç–ª **'–¢–∏–π–º—ç—ç'** –≥—ç–∂ –±–∏—á–Ω—ç “Ø“Ø.",
                    "offer_report": True,
                    "search_performed": True
                }
            else:
                return {
                    "response": response,
                    "offer_report": False,
                    "search_performed": True
                }

        except Exception as e:
            logger.error(f"‚ùå Error processing general query: {e}")
            return {
                "response": "–•–∞–π–ª—Ç —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.",
                "offer_report": False
            }

    async def _handle_report_request(self, user_message: str) -> dict:
        """Handle explicit report generation requests"""
        logger.info("üìã Handling report request")

        try:
            report_type = self._determine_report_type(user_message)
            logger.info(f"üìä Generating {report_type} report")

            if report_type == "property":
                if not self.last_property_analysis:
                    return {
                        "response": "–û—Ä–æ–Ω —Å—É—É—Ü–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª –±–∞–π—Ö–≥“Ø–π. –≠—Ö–ª—ç—ç–¥ –æ—Ä–æ–Ω —Å—É—É—Ü–Ω—ã —Ö–æ–ª–±–æ–æ—Å –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø.",
                        "offer_report": False
                    }
                response = await self.report_service.generate_property_report(self.last_property_analysis)

            elif report_type == "district":
                response = await self.report_service.generate_district_report()

            elif report_type == "comprehensive":
                response = await self.report_service.generate_comprehensive_market_report()

            else:
                response = "–¢–∞–π–ª–∞–Ω–≥–∏–π–Ω —Ç”©—Ä”©–ª —Ç–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π –±–∞–π–Ω–∞."

            if isinstance(response, dict) and response.get("success"):
                return {
                    "response": response["message"],
                    "download_url": response["download_url"],
                    "filename": response["filename"],
                    "offer_report": False,
                    "report_generated": True
                }
            else:
                return {
                    "response": str(response),
                    "offer_report": False
                }

        except Exception as e:
            logger.error(f"‚ùå Error generating report: {e}")
            return {
                "response": f"–¢–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: {str(e)}",
                "offer_report": False
            }

    def _determine_report_type(self, message: str) -> str:
        """Determine what type of report is being requested"""
        message_lower = message.lower()

        if any(keyword in message_lower for keyword in ['–¥“Ø“Ø—Ä–≥–∏–π–Ω —Ç–∞–π–ª–∞–Ω', '–¥“Ø“Ø—Ä—ç–≥ —Ö–∞—Ä—å—Ü—É—É–ª–∞—Ö', '–±“Ø—Ö –¥“Ø“Ø—Ä—ç–≥']):
            return "district"
        elif any(keyword in message_lower for keyword in ['–∏–∂ –±“Ø—Ä—ç–Ω', '–¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –∑–∞—Ö –∑—ç—ç–ª', '–∑–∞—Ö –∑—ç—ç–ª–∏–π–Ω —Ç–∞–π–ª–∞–Ω']):
            return "comprehensive"
        elif self.last_property_analysis:
            return "property"
        else:
            return "district"  # Default

    def _extract_district_name(self, message: str) -> str:
        """Extract district name from message"""
        districts = [
            "—Ö–∞–Ω-—É—É–ª", "–±–∞—è–Ω–≥–æ–ª", "—Å“Ø—Ö–±–∞–∞—Ç–∞—Ä", "—á–∏–Ω–≥—ç–ª—Ç—ç–π",
            "–±–∞—è–Ω–∑“Ø—Ä—Ö", "—Å–æ–Ω–≥–∏–Ω–æ—Ö–∞–π—Ä—Ö–∞–Ω", "–±–∞–≥–∞–Ω—É—É—Ä", "–Ω–∞–ª–∞–π—Ö", "–±–∞–≥–∞—Ö–∞–Ω–≥–∞–π"
        ]

        message_lower = message.lower()
        for district in districts:
            if district in message_lower:
                return district
        return None

    async def _generate_enhanced_property_response(self, query: str, property_details: dict,
                                                   district_analysis: str, url: str) -> str:
        """Generate enhanced property analysis response"""

        # Get property-specific search data
        search_context = ""
        try:
            district_name = property_details.get("district", "")
            if district_name and district_name != "N/A":
                search_query = f"–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä {district_name} –¥“Ø“Ø—Ä—ç–≥ –æ—Ä–æ–Ω —Å—É—É—Ü–Ω—ã –∑–∞—Ö –∑—ç—ç–ª “Ø–Ω—ç"
                search_results = self.search_tool.invoke({"query": search_query})
                if search_results:
                    search_context = f"–ù—ç–º—ç–ª—Ç –∑–∞—Ö –∑—ç—ç–ª–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª: {str(search_results)[:500]}"
        except Exception as e:
            logger.error(f"Search failed for property context: {e}")

        prompt = ChatPromptTemplate.from_messages([
            ("system", """–¢–∞ –±–æ–ª “Ø–ª —Ö”©–¥–ª”©—Ö —Ö”©—Ä”©–Ω–≥–∏–π–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω. –û—Ä–æ–Ω —Å—É—É—Ü–Ω—ã –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —à–∏–Ω–∂–∏–ª–≥—ç—ç–≥ –ú–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä —Ö–∏–π–Ω—ç “Ø“Ø.

–î–∞—Ä–∞–∞—Ö –∑“Ø–π–ª—Å–∏–π–≥ —Ç—É—Å–≥–∞–Ω–∞ —É—É:
1. –û—Ä–æ–Ω —Å—É—É—Ü–Ω—ã “Ø–Ω–¥—Å—ç–Ω –º—ç–¥—ç—ç–ª—ç–ª
2. “Æ–Ω–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç –±–∞ —Ç–æ–æ—Ü–æ–æ–ª–æ–ª
3. –î“Ø“Ø—Ä–≥–∏–π–Ω –∑–∞—Ö –∑—ç—ç–ª—Ç—ç–π —Ö–∞—Ä—å—Ü—É—É–ª–∞–ª—Ç
4. –•”©—Ä”©–Ω–≥”© –æ—Ä—É—É–ª–∞–ª—Ç—ã–Ω –±–æ–ª–æ–º–∂
5. –ü—Ä–∞–∫—Ç–∏–∫ –∑”©–≤–ª”©–º–∂

–ó”©–≤—Ö”©–Ω –ú–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä, –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É."""),
            ("human", """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç: {query}

–û—Ä–æ–Ω —Å—É—É—Ü–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª: {property_details}

–î“Ø“Ø—Ä–≥–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç: {district_analysis}

–ù—ç–º—ç–ª—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç: {search_context}

–û—Ä–æ–Ω —Å—É—É—Ü–Ω—ã –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —à–∏–Ω–∂–∏–ª–≥—ç—ç–≥ –ú–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä —Ö–∏–π–Ω—ç “Ø“Ø.""")
        ])

        chain = prompt | self.llm | StrOutputParser()
        response = await chain.ainvoke({
            "query": query,
            "property_details": json.dumps(property_details, ensure_ascii=False, indent=2),
            "district_analysis": district_analysis,
            "search_context": search_context
        })

        return response

    async def _generate_enhanced_district_response(self, query: str, district_analysis: str,
                                                   district_name: str) -> str:
        """Generate enhanced district response"""

        # Get district-specific market data
        search_context = ""
        try:
            if district_name:
                search_query = f"{district_name} –¥“Ø“Ø—Ä—ç–≥ –æ—Ä–æ–Ω —Å—É—É—Ü –∑–∞—Ö –∑—ç—ç–ª —Ö”©–≥–∂–∏–ª"
                search_results = self.search_tool.invoke({"query": search_query})
                if search_results:
                    search_context = f"–ù—ç–º—ç–ª—Ç –º—ç–¥—ç—ç–ª—ç–ª: {str(search_results)[:500]}"
        except Exception as e:
            logger.error(f"Search failed for district context: {e}")

        prompt = ChatPromptTemplate.from_messages([
            ("system", """–¢–∞ –±–æ–ª “Ø–ª —Ö”©–¥–ª”©—Ö —Ö”©—Ä”©–Ω–≥–∏–π–Ω —Ç—É—Å–ª–∞—Ö. –î“Ø“Ø—Ä–≥–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç–≥ –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ç–∞–π–ª–±–∞—Ä–ª–∞–Ω–∞ —É—É.

–î–∞—Ä–∞–∞—Ö –∑“Ø–π–ª—Å–∏–π–≥ —Ç—É—Å–≥–∞–Ω–∞ —É—É:
1. –î“Ø“Ø—Ä–≥–∏–π–Ω “Ø–Ω–∏–π–Ω —Ç“Ø–≤—à–∏–Ω
2. –•–∞—Ä—å—Ü—É—É–ª–∞–ª—Ç –±—É—Å–∞–¥ –¥“Ø“Ø—Ä–≥“Ø“Ø–¥—Ç—ç–π
3. –ë–∞–π—Ä—à–ª—ã–Ω –¥–∞–≤—É—É —Ç–∞–ª
4. –•”©—Ä”©–Ω–≥”© –æ—Ä—É—É–ª–∞–ª—Ç—ã–Ω –±–æ–ª–æ–º–∂
5. –ò—Ä—ç—ç–¥“Ø–π–Ω —Ç”©–ª”©–≤

–ó”©–≤—Ö”©–Ω –ú–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä —Ö–∞—Ä–∏—É–ª–Ω–∞ —É—É."""),
            ("human", """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç: {query}

–î“Ø“Ø—Ä–≥–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç: {district_analysis}

–ù—ç–º—ç–ª—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç: {search_context}

–î“Ø“Ø—Ä–≥–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –¥—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π —Ç–∞–π–ª–±–∞—Ä–ª–∞–Ω–∞ —É—É.""")
        ])

        chain = prompt | self.llm | StrOutputParser()
        response = await chain.ainvoke({
            "query": query,
            "district_analysis": district_analysis,
            "search_context": search_context
        })

        return response

    async def _generate_market_research_response(self, query: str, search_results) -> str:
        """Generate market research response"""

        prompt = ChatPromptTemplate.from_messages([
            ("system", """–¢–∞ –±–æ–ª “Ø–ª —Ö”©–¥–ª”©—Ö —Ö”©—Ä”©–Ω–≥–∏–π–Ω –∑–∞—Ö –∑—ç—ç–ª–∏–π–Ω —à–∏–Ω–∂—ç—ç—á. –ò–Ω—Ç–µ—Ä–Ω—ç—Ç —Ö–∞–π–ª—Ç—ã–Ω “Ø—Ä –¥“Ø–Ω–¥ “Ø–Ω–¥—ç—Å–ª—ç–Ω –∑–∞—Ö –∑—ç—ç–ª–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç —Ö–∏–π–Ω—ç “Ø“Ø.

–î–∞—Ä–∞–∞—Ö –∑“Ø–π–ª—Å–∏–π–≥ —Ç—É—Å–≥–∞–Ω–∞ —É—É:
1. –û–¥–æ–æ–≥–∏–π–Ω –∑–∞—Ö –∑—ç—ç–ª–∏–π–Ω –Ω”©—Ö—Ü”©–ª
2. “Æ–Ω–∏–π–Ω —á–∏–≥–ª—ç–ª
3. –•”©—Ä”©–Ω–≥”© –æ—Ä—É—É–ª–∞–ª—Ç—ã–Ω –±–æ–ª–æ–º–∂
4. –≠—Ä—Å–¥—ç–ª –±–∞ —Å–æ—Ä–∏–ª—Ç
5. –ò—Ä—ç—ç–¥“Ø–π–Ω —Ç”©–ª”©–≤

–ó”©–≤—Ö”©–Ω –ú–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä, –º—ç—Ä–≥—ç–∂–ª–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç —Ö–∏–π–Ω—ç “Ø“Ø."""),
            ("human", """–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞—Å—É—É–ª—Ç: {query}

–•–∞–π–ª—Ç—ã–Ω “Ø—Ä –¥“Ø–Ω: {search_results}

–ó–∞—Ö –∑—ç—ç–ª–∏–π–Ω —à–∏–Ω–∂–∏–ª–≥—ç—ç–≥ –ú–æ–Ω–≥–æ–ª —Ö—ç–ª—ç—ç—Ä —Ö–∏–π–Ω—ç “Ø“Ø.""")
        ])

        chain = prompt | self.llm | StrOutputParser()
        response = await chain.ainvoke({
            "query": query,
            "search_results": search_results
        })

        return response

    def get_analytics(self) -> dict:
        """Get usage analytics"""
        return {
            "last_property_analysis": self.last_property_analysis is not None,
            "last_district_analysis": self.last_district_analysis is not None,
            "last_response_type": self.last_response_type,
            "property_timestamp": self.last_property_analysis.get("timestamp") if self.last_property_analysis else None,
            "district_timestamp": self.last_district_analysis.get("timestamp") if self.last_district_analysis else None
        }